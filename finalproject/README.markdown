[ССЫЛКА НА ПРЕЗЕНТАЦИЮ](https://drive.google.com/file/d/1kbxNbE_-6tQYJr8FIaQPwEmUxM0EUcrN/view)
# Описание проекта

Проект посвящен классификации логотипов автомобилей с помощью сверточной нейронной сети (CNN). Цель — создание модели машинного обучения для распознавания 8 марок автомобилей (Hyundai, Lexus, Mazda, Mercedes, Opel, Skoda, Toyota, Volkswagen) на основе изображений их логотипов. Проект включает подготовку данных, обучение модели, оценку производительности и визуализацию результатов.

## Общая информация
- **Цель**: Разработка высокоточной модели для классификации автомобильных логотипов с использованием современных инструментов глубокого обучения.
- **Язык разработки**: Python 3.9.13

## Архитектура модели
Модель построена на основе предобученной сети **EfficientNet-B0**, предоставленной библиотекой `torchvision.models`. Эта архитектура выбрана за её эффективность и высокую производительность при работе с изображениями.

- **Базовая структура**: EfficientNet-B0 — легковесная CNN с блоками Inverted Residuals и Squeeze-and-Excitation, оптимизированная для баланса между точностью и вычислительными затратами.
- **Модификация**: Финальный полносвязный слой (`classifier[1]`) заменён на `nn.Linear` с 8 выходными нейронами (по числу классов).
- **Предобучение**: Используются веса ImageNet (`EfficientNet_B0_Weights.IMAGENET1K_V1`) для трансферного обучения.
- **Устройство**: Модель автоматически использует GPU (если доступно) или CPU через `torch.device("cuda" if torch.cuda.is_available() else "cpu")`.

## Предобработка и аугментация данных
Данные обрабатываются с использованием библиотек `albumentations` и `torchvision`. Подготовка включает:

- **Загрузка**: Класс `CarLogoDataset` (в `src/data/dataset.py`) загружает изображения из папок `data/Train/` и `data/Test/`, присваивая метки на основе названий папок.
- **Трансформации для тренировочных данных (`train_transform`)**:
  - Изменение размера до 224x224 пикселей (`A.Resize`).
  - Случайный поворот до ±30° (`A.Rotate(limit=30, p=0.5)`).
  - Горизонтальное отражение (`A.HorizontalFlip(p=0.5)`).
  - Нормализация по ImageNet: среднее `[0.485, 0.456, 0.406]`, стандартное отклонение `[0.229, 0.224, 0.225]` (`A.Normalize`).
  - Конвертация в тензор (`ToTensorV2`).
- **Трансформации для тестовых данных (`test_transform`)**: Только изменение размера и нормализация, без аугментации.
- **Цель аугментации**: Увеличение разнообразия данных для предотвращения переобучения.

## Процесс обучения
- **Оптимизатор**: `torch.optim.AdamW` с начальной скоростью обучения 0.001.
- **Функция потерь**: `nn.CrossEntropyLoss`.
- **Гиперпараметры**:
  - Количество эпох: 50 (настраивается через `--epochs`).
  - Размер батча: 32 (настраивается через `--batch_size`).
- **Сохранение**:
  - Модель: `results/models/efficientnet_b0.pth`.
  - График потерь: `results/plots/train_loss.png`.

## Структура проекта
```
car-logo-classification/
├── data/
│   ├── Train/              # Тренировочные данные (8 папок по маркам)
│   └── Test/               # Тестовые данные (8 папок по маркам)
├── results/
│   ├── models/             # Сохраненные модели (efficientnet_b0.pth)
│   ├── plots/              # Графики (train_loss.png, confusion_matrix_2025-07-17_11-12-19.png, precision_by_class.png)
│   └── predictions/        # Предсказания (collage_1.png, collage_2.png, collage_3.png, collage_4.png, collage_5.png, evaluation_metrics_2025-07-17_14-28-00.txt)
├── src/
│   ├── models/             # Модуль с определением модели
│   │   └── model.py        # Определение класса CarLogoCNN
│   ├── data/               # Модуль с обработкой данных
│   │   └── dataset.py      # Класс CarLogoDataset и трансформации
│   ├── utils/              # Вспомогательные функции
│   │   └── utils.py        # Функции для сохранения модели и графиков
│   ├── train.py            # Скрипт для обучения модели
│   ├── evaluate.py         # Скрипт для оценки модели
│   └── predict.py          # Скрипт для предсказаний и коллажа
├── requirements.txt         # Список зависимостей
└── README.md               # Документация
```
 **Аппаратное обеспечение**:
  - **GPU**: NVIDIA GTX 1650 (4 ГБ, ~4.7 TFLOPS FP32, ~9 TFLOPS FP16).
  - **CPU**: Intel Core i5-9300H (4 ядра, 8 потоков).
  - **ОС**: Windows 11 64-разрядная система.
  - **Python**: 3.9.13
  - **CUDA**: Версия 11.8.

## Результаты
- **Производительность**:
  - Тестовый набор: 160 изображений.
  - Потери на тесте: 0.7242.
  - Точность (Accuracy): 0.9750 (97.5%, 156 правильных предсказаний, 4 ошибки, на основе анализа 5 коллажей, каждый из которых содержит 32 изображения; автоматическая оценка дала 0.8650, требуется перепроверка).
  - F1-Score: 0.8651.
  - Weighted Precision: 0.8713.
  - Precision по классам:
    - Hyundai: 0.9111
    - Lexus: 0.9388
    - Mazda: 0.8113
    - Mercedes: 0.9000
    - Opel: 0.8723
    - Skoda: 0.7797
    - Toyota: 0.9500
    - Volkswagen: 0.8070
- **Примечание**: Точность 97.5% основана на ручном анализе коллажей. Автоматическая оценка (`evaluate.py`) показала точность 86.5%.
- **Файлы результатов**:
  - Модель: `results/models/efficientnet_b0.pth`
  - График потерь:  
    ![График потерь](results/plots/train_loss.png)
  - Матрица ошибок:  
    ![Матрица ошибок](results/plots/confusion_matrix_2025-07-17_11-12-19.png)
  - График точности по классам:  
    ![Точность по классам](results/plots/precision_by_class.png)
  - Коллаж 1:  
    ![Коллаж 1](results/predictions/collage1.png)
  - Коллаж 2:  
    ![Коллаж 2](results/predictions/collage2.png)
  - Коллаж 3:  
    ![Коллаж 3](results/predictions/collage3.png)
  - Коллаж 4:  
    ![Коллаж 4](results/predictions/collage4.png)
  - Коллаж 5:  
    ![Коллаж 5](results/predictions/collage5.png)
  - Метрики: `results/predictions/evaluation_metrics_2025-07-17_14-28-00.txt`

## Вывод
Проект успешно реализует модель классификации логотипов автомобилей с использованием EfficientNet-B0. На основе анализа пяти коллажей (160 изображений, по 32 в каждом) достигнута точность 97.5% (4 ошибки). Однако автоматическая оценка (`evaluate.py`) показала точность 86.5%. Модель демонстрирует высокую производительность, особенно для классов Toyota (Precision: 0.9500) и Lexus (Precision: 0.9388). Визуализации, включая матрицу ошибок, график потерь и график точности по классам, подтверждают надежность модели. Пять коллажей предоставляют наглядное представление предсказаний. Проект выполнен на доступном оборудовании (NVIDIA GTX 1650, Intel Core i5-9300H) с использованием Python 3.9.13 и CUDA 11.8, что делает его воспроизводимым в аналогичных условиях. Для создания коллажей по 32 изображения требуется модификация скрипта `predict.py`.
